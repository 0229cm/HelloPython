# 변수선언
# 변수는 어떤 값을 저장하는 메모리상의 공간
# 메모리상의 공간은 고유주소(16진수)로 할당되어 있음
# 개발자가 이러한 공간의 위치를 일일이 기억하기 어려움
# 따라서, 메모리상의 주소를 문자이름으로 치환시켜
# 어떤 값을 저장하는데 사용하는 것을 변수라함

# 자바, C++ 과는 달리 변수 선언시 자료형을 지정할 필요 x
# 변수에 저장될 값의 유형을 추론해서 변수의 자료형으로 자동 지정

# 변수 선언 예시
intVar = 123
floatVar = 456.789
strVar = 'abcxyz'
boolVar = True

# 동적 변수 유형
# 변수의 유형은 변수에 대입하는 값에 따라
# 유연하게 변화함
intVar = 100.00     # 정수변수 => 실수변수
intVar = 'Hello'    # 실수변수 => 문자열변수

# 변수할당의 또 다른 예시
a = 100
b = 456.789
a, b = 456.78, 123

# 자신의 이름 name, 몸무게 weight, 나이 age 를
# 변수로 선언하고 값을 대입한 후
# 결과를 출력하세요

name = 'min'
weight = 1
age = 2.1

print('이름은 %s 이고, 나이는 %d, 몸무게는 %.1f kg 입니다'
      % (name, weight, age))

# 변수명 규칙
# 대소문자 구분, 첫 글자 숫자 x, 예약어 사용불가
# True, False, None, and, or, not,
# break, continue, return, if, else, elif, for, while, except, finally, gloval, import, try'

# 변수 사용 예시
# 변수에는 다른 변수의 값을 대입할 수 있음
x = 100
y = x       # x 에 저장된 값을 y에 대입

# 변수에는 표현식의 결과(수식)를 대입할 수 있음
z = 100 + 200

# 변수에는 변수와 값의 연산을 통해 대입할 수 있음
a = x + 100

# 변수를 연산하고 그 결과를 자신의 변수에 대입
b = 1
b = b + 1

# 변수에 연속된 값을 대입하는 경우
# 오른쪽에서 왼쪽 순서로 진행됨
a = b = c = d = e = 100

# 각 변수별 유형 특징
# 정수형 : 크기에는 제한없음
intVal = 123456789
print(intVal)

# 실수형 : 수치를 과학적 표기법으로 나타낼 수 있음
x = 3.14
print(x)
x = 3.14e5      # 3.14 x 10^5
print(x)
x = 3.14e-4
print(x)

# 불 bool 형 : 비교/조건 표현식의 결과를 참/거짓으로 저장함
a = (100 == 120)
b = (10 < 100)
print(a)
print(b)

# 문자열 : "" 를 사용하든 '' 를 사용하든 모두 문자열로 인식
# 여러줄 문자열을 저장할 때는 """ 를 사용
# "첫째줄
# 둘째줄
# 셋째줄" 를 저장하려면?

strVar1 = "첫째줄\n둘째줄\n셋째줄"

strVar2 = """첫째줄
둘째줄
셋째줄"""

# f-string
# 변수와 문자열을 합쳐서 문장을 출력할 때,
# python 2.x 에서는 .format()함수를 이용했고
# python 3.x 에서는 %-formatting 을 사용했다
# 코드가 심각하게 지저분해지는 문제 때문에
# python 3.6 부터 Literal String Interpolation
# 이라는 기능이 새롭게 추가됨

num1 = 100
num2 = 100
print('%d + %d은 %d 입니다' %
      (num1, num2, num1+num2))

f'{num1} + {num2}은 {num1+num2}입니다'



























