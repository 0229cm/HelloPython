# -*- coding: utf-8 -*-
"""머신러닝05-titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g1vQ4VKcU8ugfGNLVp4cOd3XiLlGkU_V
"""

# 타이타닉 예측하기 예제
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# 타이타닉 데이터파일 불러오기
titanic = pd.read_csv('https://raw.githubusercontent.com/hanrury/machine-learning/master/titanic.csv')

# 타이타닉 데이터 요약
titanic.describe()

# 타이타닉 데이터 결측치 확인
titanic.info()

# 결측치 처리 - fillna, dropna
# age의 결측치는 age의 평균값으로 대체
# cabin의 결측치는 N으로 대체

age_mean = np.mean(titanic['Age'])
titanic['Age'].fillna(age_mean,inplace=True)
titanic['Cabin'].fillna('N',inplace=True)
titanic.dropna(inplace=True) #Embarked 결측지 제거
titanic.info()

# 범주형 데이터 분포 확인
print(titanic['Survived'].value_counts())
print(titanic['Pclass'].value_counts())
print(titanic['Sex'].value_counts())
print(titanic['Embarked'].value_counts())

# 범주형 데이터를 문자열값으로 변환
# life, seat, port 컬럼 추가
def getLife(x):
  life = 'dead'
  if x == 1:life = 'live'
  return life

titanic['life'] = titanic['Survived'].apply(lambda x:getLife(x)) # apply : 데이터프레임의 각 행에 대해 특정 함수를 적용하는 함수
titanic[['Survived','life']].head()

# 범주형 데이터를 문자열값으로 변환 2 : getSeats
# pclass : 1st,2nd,3rd
titanic['Pclass']
def getSeats(x):
  seat = '1st'
  if x == 2 : seat = '2nd'
  elif x == 3 : seat = '3rd'
  return seat
titanic['seat'] = titanic['Pclass'].apply(lambda x:getSeats(x))
titanic[['Pclass','seat']]

# 범주형 데이터를 문자열값으로 변환 3 : getPorts
# embarked : cherbourg, queenstown, southampton
titanic['Embarked']
def getPorts(x):
  port = 'cherbourg'
  if x == 'Q' : port = 'queenstown'
  elif x == 'S ' : port = 'southampton'
  return port
titanic['port'] = titanic['Embarked'].apply(lambda x:getPorts(x))
titanic[['Embarked','port']]

# 연속형 데이터를 범주형으로 변환
# 승객 나이를 유아, 10대, 20대~80대
# 신생아 :  1년 미만 
# 유아 : 1~6세까지
# 어린이 : 7~12 까지
# 청소년 : 13~19세 까지
# 성인 : 20대,30대,~ 80대

def getAges(x):
  age = '80대'
  if x <= 1: age ='신생아'
  elif x <= 6: age ='유아'
  elif x <= 12: age ='어린이'
  elif x <= 19: age ='청소년'
  elif x <= 29: age ='20대'
  elif x <= 39: age ='30대'
  elif x <= 49: age ='40대'
  elif x <= 59: age ='50대'
  elif x <= 69: age ='60대'
  elif x <= 79: age ='70대'
  return age
titanic['age'] = titanic['Age'].apply(lambda x:getAges(x))
titanic[['Age','age']]

# 문자열 데이터를 범주형으로 변환2 : getTitles
# 승객의 직함 추출
titanic['Name'].head(10)
titanic['Name'].tail(10)

fmt = ' ([A-Za-z]+)\.'
# 공백으로 시작하고 영문자가 하나이상 존재하며 .으로 끝나는 문자열을 정의하는 형식지정자
titanic['Titles'] = titanic['Name'].str.extract(fmt)
# Name 컬럼의 각값을 문자형으로 변환후 특정문자열 추출함

titanic['Titles'].head(10)
titanic['Titles'].tail(10)
titanic['Titles'].value_counts()

"""# 탐색적 분석
* 수집한 데이터에 대해 다양한 각도로 관찰하고 이해하는 과정
* 데이터를 분석하고 예측하기 전에 통계적인 방법을 이용해서 시각화하고 직관적으로 이해하는 것
"""

# 관심대상 변수 시각화 
# 생존여부 시각화 => 범주형 데이터 => 막대그래프 이용
# titanic['Survived'].value_counts().plot.bar()
titanic['life'].value_counts().plot.bar(rot=0)

# 그래프에 수치 표시하기
ax = titanic['life'].value_counts().sort_index().plot.bar(rot=0,color=['r','g'])
# text(x좌표,y좌표,텍스트,폰트,크기)
for p in ax.patches:
  ax.text(p.get_x()+0.2,p.get_height()+5,str(p.get_height()))

# 좌석등급 시각화 - 범주형
ax = titanic['seat'].value_counts().sort_index().plot.bar(rot=0,color=['r','g','b'])
for p in ax.patches:
  ax.text(p.get_x()+0.2,p.get_height()+5,str(p.get_height()))

# 성별 시각화
ax = titanic['Sex'].value_counts().sort_index().plot.bar(rot=0)
for p in ax.patches:
  ax.text(p.get_x()+0.2,p.get_height()+5,str(p.get_height()))

# 승선위치 시각화
ax = titanic['port'].value_counts().sort_index().plot.bar(rot=0)
for p in ax.patches:
  ax.text(p.get_x()+0.2,p.get_height()+5,str(p.get_height()))

# 승객나이 시각화
ax = titanic['age'].value_counts().sort_index().plot.bar(rot=0)
for p in ax.patches:
  ax.text(p.get_x()+0.2,p.get_height()+5,str(p.get_height()))

# 관심대상 이변수 시각화
# 성별 생존여부 시각화
titanic.groupby(['Sex', 'life'])['life'].count()
titanic.groupby(['Sex', 'life'])['life'].count().plot.bar(rot=0)

# 그래프가 각각의 범주로 분리되어 출력
# 여/사망, 여/생존, 남/사망, 남/생존

# 집계 결과의 재구성 : unstack
# unstack : 행단위 출력결과를 열단위 출력결과로 변환함 (long -> wide)
print(titanic.groupby(['Sex', 'life'])['life'].count().unstack())
titanic.groupby(['Sex', 'life'])['life'].count().unstack().plot.bar(rot =0)

# 그래프에 수치 표시하기
ax = titanic.groupby(['Sex','life'])['life'].value_counts().unstack().sort_index().plot.bar(rot=0)
# text(x좌표,y좌표,텍스트,폰트,크기)
for p in ax.patches:
  ax.text(p.get_x()+0.2,p.get_height()+5,str(p.get_height()))

# 좌석등급별 생존여부 시각화

# 승선위치별 생존여부 시각화

# 나이대별 생존여부 시각화

# 승객직함별 생존여부 시각화