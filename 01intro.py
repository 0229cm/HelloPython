# 파이썬 개요

# 프로그래밍 언어 특성
# compiler 방식
# 소스코드를 작성한 후 일괄적으로 기계어로 변환 후 실행
# 소스코드를 기계어로 변환하는 과정 : 컴파일
# 소스코드를 기계어로 변환하는 프로그램 : 컴파일러
# 수정사항 발생시 전체 코드를 다시 컴파일해야함
# ex) C, C++

# 인터프리터 interpreter 방식
# 소스코드 작성 후 한 줄씩 읽어 기계어로 변환 후 실행
# 별도로 기계어 번역 파일은 생성되지 않음 -> 속도 느림
# 코드를 한 줄씩 읽어 기계어로 변환하는 프로그램 : 인터프리터
# ex) gwbasic, fortran, javascript, python

# 하이브리드 방식
# 컴파일러 + 인터프리터 혼용
# 즉, 소스코드를 번역해서 중간코드를 기계어로 생성한 후
# 중간코드는 인터프리터 방식으로 한 줄씩 읽어 코드 실행
# 플랫폼에 독립적인 코드 작성/실행 가능
# ex) java, .net

# 파이썬 실행 방법
# 전체 코드 실행 : shift + f10
# 선택한 코드 실행 : alt + shift + e

# 파이썬 기본 출력문 : print
# print(출력할내용)
print('Hello World!!')
print(100)      # 숫자
print('100')    # 문자

print(100+100)  # 수식

print('100+100')  # 수식

# print('출력서식' % (출력내용 ))
# 100+100 은 200입니다 라는 문자열을 출력하는 경우
print('100+100 은 200입니다')

print('100+100은')
print(100+100)
print('입니다')

print('100+100은',100+100,'입니다')

print(100,'+',100, '은', 100+100, '입니다')

# python 3.x 에서 제공
print('%d + %d은 %d 입니다' % (100, 100, 100+100))
# print 함수에 사용할 수 있는 형식지정자
# %d : 정수 decimal
# %f : 실수 float
# %c : 문자 character
# %c : 문자열 string

print('%d' % 1234567890)
print('%15d' % 1234567890)      # 남은 공간은 빈칸으로 채움
print('%015d' % 1234567890)     # 남은 공간은 0 으로 채움

print('%f' % 12345.67890)
print('%1.f' % 12345.67890)     # 소수 첫째자리까지
print('%7.1f' % 12345.67890)    # 전체 7자리, 소수 1자리
print('%10.1f' % 12345.67890)   # 전체 10자리, 소수 1자리

print('%s' % 'abcdefghi')
print('%13s' % 'abcdefghi')     # 남는 공간은 빈칸으로 채움

# format 함수를 이용한 출력 (python 2.x)
print('{0} + {1}은 {2} 입니다'
                .format(100, 100, 100+100))
print('{0:d} + {1:d}은 {2:d} 입니다'
                .format(100, 100, 100+100))

# 특수문자 출력하기
# \n : 줄바꿈
# \' : 작은따움표 출력
# \" : 큰 따움표 출력
# \t : tab 문자 출력

print('\n줄바꿈\n연습\n')
print('\t탭\t연습\t')      # 탭 간격 : 4칸






