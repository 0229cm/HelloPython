# -*- coding: utf-8 -*-
"""파이썬통계06-고급pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R7b4rywHn3XC9wPMR0ahRqzj-k8nm9mO
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

# %precision 3

pd.set_option('display.max_columns', 50)
pd.set_option('display.width', 200)

"""# 데이터프레임에 새로운 항목 추가
```
* 객체명[열이름] = 값목록 (열우선 데이터추가)
* 객체명.append(Series/Dict 값) (행우선 데이터추가)
```
"""

sj = pd.DataFrame() # 빈 데이터프레임
sj['이름'] = ['지현', '혜교', '수지']
sj['국어'] = [99, 87, 56]
sj['학점'] = ['수', '양', '미']
sj.index = np.arange(1,len(sj)+1)
print(sj)

sina = pd.Series(['시나', 88, '우'],
                 index=['이름', '국어', '학점'])
sj = sj.append(sina, ignore_index=True)
print(sj)

person = {'이름': '아무개', '국어':99, '학점': '우'}
sj = sj.append(person, ignore_index=True)
sj.index = np.arange(1,len(sj)+1)
print(sj)

"""# pandas 기술통계
```
* 데이터 수 : count
* 전체 합 : sum(축)
* 평균 : mean
* 최반값 : mode
* 중앙값 : median
* 누적값 : cumsum
* 최대/최소 : min/max
* 분산, 공분산 : var, cov
* 표준편차 : std
* 상관계수 : corr
```
"""

name = ['Tom','James','Ricky','Vin','Steve','Smith','Jack','Lee','David','Gasper','Betina','Andres']
age = [25,26,25,23,30,29,23,34,40,30,51,46]
rating = [4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65]

data = {'name':name, 'age':age, 'rating':rating}

df = pd.DataFrame(data)
df.index = np.arange(1, len(df)+1)
print(df)

print(df.count())  # 데이터 수
print(df.sum())
print(df.mean())

"""# 원핫인코딩 onehot-encoding
```
* 하나의 True 와 나머지가 False 인 인코딩을 의미
* 컴퓨터는 문자보다 숫자를 더 잘 처리함
* 따라서, 단어/기호를 숫자로 바꾸는 기법이 필요

* 범주형 데이터로 구성된 분류문제를 푸는
  머신러닝/딥러닝에서 주로 사용
* pandas 에서는 get_dummies 함수를 이용함
```

ex) 과일이미지를 이용해서 과일이름을 판별하는 경우
기본 데이터 : 사과/배/바나나
표준 인코딩 적용 : 1/2/3 (서수의 개념으로 인해 왜곡 발생)
원핫 인코딩 적용 : 100/010/001

ex) 숫자 이미지를 이용해서 숫자를 판별하는 경우
기본 데이터 : 1/5/9
원핫 인코딩 코드별 의미 : 123456789
원핫 인코딩 적용:         100000000/000010000/000000010
"""

data = ['Tom', 'James', 'Vin', 'Steve']
df = pd.Series(data)
df.index = np.arange(1, len(df)+1)
print(df)

print(df.str.get_dummies()) # 원핫인코딩으로 변환
# Tom : 0010
# James : 1000

"""# 데이터프레임 조건검색 filtering
```
조건을 만족하는 특정 데이터를 추출하려면
[] 에 조건연산자를 이용한 조건식을 작성하면 됨
```
"""

# 핸드폰 선호도 데이터

from google.colab import files
files.upload()

phone = pd.read_csv('phone02.csv')
print(phone)

# 연도별 추출
# ex) 핸드폰 제조년이 2015년인 데이터는?
# find = (phone.loc['makeyear'] == 2015)
find = (phone.makeyear == 2015)
print(phone[find])

# ex) 핸드폰 구매년이 2015인 데이터는?
find = (phone.buyyear == 2015)
print(phone[find])

# ex) 화면크기가 4.5 인 핸드폰을 구매한 소비자의
# 나이 또는 키, 몸무게 조회
find = phone.dispsize == 4.5
print(phone[find])
print(phone[find]['age']) # 나이만 출력
print(phone[find][['age', 'height', 'weight']])

# 나이가 35세 이상인 소비자들이 구매한
# 핸드폰의 재조년, 화면크기 조회
find = phone.age >= 35
print(phone[find])
print(phone[find][['age', 'makeyear', 'dispsize']])

"""# 데이터 정렬하기
```
* pandas 에서는 2가지 정렬을 지원
* 인덱스로 정렬 : sort_index(기준축, ascending=True/False)
* 값으로 정렬 : sort_values(기준컬럼)
```
"""

unsorted = pd.DataFrame(
    np.random.randint(1, 45+1, (5,2)),
    index=[1,3,2,5,4],
    columns=['두번째', '첫번째'] )
print(unsorted)

# 인덱스로 정렬하기
print(unsorted.sort_index())
print(unsorted.sort_index(ascending=False)) # 내림차순

# 값으로 정렬하기
# 정렬시 기준열을 by 속성으로 지정해야함
print(unsorted.sort_values(by='첫번째'))
print(unsorted.sort_values(by='두번째'))
print(unsorted.sort_values(by=['첫번째', '두번째']))
print(unsorted.sort_values(
    by=['첫번째', '두번째'], ascending=False))

# ex) 나이가 35세 이상인 소비자들이 구매한
# 핸드폰의 재조년, 화면크기 조회
# 단, 나이기준 내림차순으로 정렬해서 출력하세요
find = phone.age >= 35
print(phone[find])
print(phone[find][['age', 'makeyear', 'dispsize']].sort_values(['age']))
print(phone[find][['age', 'makeyear', 'dispsize']].sort_values(['age'],ascending=False))

"""# 데이터프레임 그룹핑
```
특정조건에 따라 데이터들을 그룹으로 묶어서
집계함수를 적용해서 통계정보를 출력
해당 그룹의 특성을 살펴볼 수 있음
객체명.groupby(조건열).(집계함수)
```
"""

# 지역별 인구 데이터
city = ['서울', '서울', '서울', '부산', '부산', '부산', '인천', '인천']
year = [2015, 2010, 2005, 2015, 2010, 2005, 2015, 2010]
pop = [9904312, 9631482, 9762546, 3448737, 3393191, 3512547, 2890451, 263203]
region = ['수도권', '수도권', '수도권', '경상권', '경상권', '경상권', '수도권', '수도권']

data = {'도시':city, '연도':year, '인구':pop, '지역':region}
df = pd.DataFrame(data, index=np.arange(1,9))   
print(df)

# 도시별로 그룹핑 후 총 인구수 출력
groupby = df.groupby('도시')
print(groupby.groups) # 그룹핑 결과를 dict 형으로 출력

for name, group in groupby:
  print(name, group)  # 그룹핑 결과를 테이블로 출력

# 그룹핑 결과 집계함수 적용
print(groupby.sum())
print(groupby.mean())
# 연도까지 합산/평균해서 출력

print(df.groupby('도시')['인구'].sum())
print(df.groupby('도시')['인구'].mean())
# 위 코드를 한줄로 작성함



# 연도별 총/평균 인구 출력
print(df.groupby('연도')['인구'].sum())
print(df.groupby('연도')['인구'].mean())

# 지역별, 연도별 총/평균 인구 출력
print(df.groupby(['지역', '연도'])['인구'].sum())
print(df.groupby(['지역', '연도'])['인구'].mean())

from google.colab import files
files.upload()

# ex) 미국 질병통제센터에서 수집한 연도별 신생아 성별 출생수 데이터
# births.csv 파일을 이용해서 데이터프레임 생성

births = pd.read_csv('births.csv')
births.index = np.arange(1, len(births)+1)
print(births)

# 연도별 출생수
print(births.groupby('year')['births'].sum())

# 월별 출생수
print(births.groupby('month')['births'].sum())
print(births.groupby(['year', 'month'])['births'].sum())

# 성별 출생수
print(births.groupby('gender')['births'].sum())

# 연도별 성별 출생수
print(births.groupby(['year', 'gender'])['births'].sum())