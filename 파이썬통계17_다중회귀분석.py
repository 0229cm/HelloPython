# -*- coding: utf-8 -*-
"""파이썬통계17- 다중회귀분석.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Z685TfpVdcoE8vpBGSi_Ea0_sHqlp-r
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
from statsmodels.formula.api import ols

"""# 다중회귀분석
# 단일 회귀분석에 비해 변수가 2개이상 증가
기술통계학이나 추론통계학 상의 주요 기법

종속변수y를 보다 더 잘 설명하고 예측하기 위해
여러 독립변수x를 사용함

다중회귀방정식
$ \hat y = a + bx_1 + cx_2 + dx_3 + ... $

하지만, 독립변수가 3개 이상인 경우
그래프로 표현하기 어려워지므로
보통 $ \hat y = a + bx_1 + cx_2 $정도로만 고려하는 것이 좋음
"""

# 한글설정 1 - 폰트설치
!sudo apt-get install -y fonts-nanum # 폰트설치
!sudo fc-cache -fv # 폰트캐시 재구성
!rm ~/.cache/matplotlib -rf # matplotlib 캐시 제거
# 설치가 끝나면 코랩의 런타임을 다시 시작

# 한글 설정 2 - 폰트 지정
plt.rc('font', family='NanumBarunGothic')
plt.rcParams['axes.unicode_minus'] = False

# ex) 부동산회사에서 소유하고 있는 주택에 대해 고객들의 많은 문의사항 중 하나는 난방비가 얼마나 드냐임. 
# 난방비 가이드라인 작성을 위해 임의로 선별한 20채의 주택에 대해 다중회귀분석을 실시하시오 (houses.txt)
houses = pd.read_csv('https://raw.githubusercontent.com/hanrury/bigdataset/master/houses.txt', sep='\t', encoding='euc-kr')
sns.pairplot(houses)

# ex) 놀이동산 만족도 데이터를 이용해서 놀이기구rides,게임만족도games,청결만족도 clean와  전체만족도overall에 대한 관계를 분석해보고
# 회귀방정식을 작성하시오 (parks.csv)
parks = pd.read_csv('https://raw.githubusercontent.com/hanrury/bigdataset/master/parks.csv')
sns.pairplot(parks)

sns.pairplot(parks.loc[:,['rides','games','clean','overall']])

# 상관분석을 히트맵으로 표시
df_corr = parks.loc[:,['rides','games','clean','overall']].corr()

fig, axs = plt.subplots(figsize=(10,10))
sns.heatmap(df_corr, annot=True)

result = ols('overall~rides+games+clean',data=parks).fit()
print(result.summary())

# 회귀모델 분석
# 결정계수 : 0.436
# 수정된 결정계수 : 129.5 (5.99e-62)
# 회귀계수 : 절편-(-131.68), 기울기1-(0.5780), 기울기2-(0.2603), 기울기3-(1.2838) 
# 회귀계수 유의수준 : (>0.00001/>0.00001/>0.00001/>0.00001)
# 회귀식 : y = 0.58*x1 + 0.26*x2 + 1.28*x3 -131.68

# 다중회귀분석
# 종속변수~독립변수1+독립변수2+독립변수3+....
# 종속변수~. ( . : 종속변수를 제외한 모든 독립변수 )
result = ols('난방비~평균외부기온+단열재+난방사용연수', data=houses).fit()
print(result.summary())
# 회귀모델 분석
# 결정계수 : 0.804
# 수정된 결정계수 : 0.767
# F통계량 : 21.90
# 회귀계수 유의수준 : (>0.00001/>0.00001/0.007/0.148)
# 회귀계수 : 기울기=-4.5827,기울기=-14.8309,기울기=6.1010/절편=427.1938
# 회귀식 : y = --4.5827*x1 + -14.8309*x2 + 6.1010*x3 + 427.1938

# 다중회귀모델 해석
# 1) 외부기온 1도 증가 = > 난방비는 4.58 감소
# 2) 단열재 두께가 1cm 증가 = > 난방비는 14.83 감소
# 3) 난방기연수가 1 년증가 => 난방비는 6.10 증가
# 4) 주탁자체 기본 난방비 => 난방비는 427.19

"""# 다중회귀모형 분석방법
* 수정된 결정계수
  + 독립변수의 수가 증가할수록 예측력이 좋아져서
  + 결정계수의 수치가 증가하는 경향이 있음
  + 이러한 효과를 상쇄시킨 수정된 결정계수를 사용

* 모든 회귀계수들의 유의성을 판단 : F분포
  + 다중회귀계수가 모두 0인지 검정함
  + 귀무가설 : 각 계수 a,b,c 가 0이다
  + 대립가설 : 각 계수 a,b,c 가 0이 아니다

* 개별회귀계수에 대한 평가 : t분포
  + 귀무가설 : 계수 x 가 0이다
  + 대립가설 : 계수 x 가 0이 아니다
  + 유의수준 0.05로 정함, 양측검정

# 회귀모형의 적합성 검정
주택회사가 보유한 주택에 대한
난방비 가이드라인 작성을 위해
다중회귀분석을 실시했었음
* 한편, 이러한 회귀모형이 과연 적합한 것일까?

회귀모형 작성시 적절한 필요조건을 
만족하는지 알아봄

* 시계방향으로 각 그래프가 의미하는 내용
=> 선형성/정규성/분산성/독립성  

![](https://github.com/hanrury/bigdataset/blob/master/diag_plots.png?raw=true)


* 1) 선형성 : 잔차 예측비교도
잔차를 표준화시켜 정규분포를 
따르는지 확인
=> 점선은 직선에 가깝게, 
분포의 모양이 위 아래 균등하게 배치


* 2) 정규성 : 독립변수가 정규성을
띄면 잔차도 정규분포를 띄는가?
=> 45도 점선에 점들이 가깝게 배치
단, 양 끝점들은 점선에서 벗어나도 무난 

* 3) 분산성 : 잔차 분산비교도
독립변수의 분산이 일정하면?
잔차도 비숫한 양상을 띄는가?
=> 점선은 직선에 가깝게, 
분포의 모양이 위 아래 균등하게 배치

* 4) 독립성 : 잔차의 영향력 파악
+ cook's distance
+ 회귀방정식의 계수결정에
불균형한 영향을 미치는 독립변수 존재 파악
+ 빨간선은 직선에 가깝게, 점들 분포는 되도록 빨간선에 가깝게, 단 빨간점선 밖은 벗어나지 않게

# 다중공선성
* 독립변수는 종속변수하고만 상관관계가 존재해야 함
* 공선성 : 하나의 독립변수가 다른 하나의 독립변수에 의해 잘 예측되는 정도 또는 서로 상관이 높은 경우를 의미
* 다중공선성 : 하나의 독립변수가 다른 여러개의 독립변수에 의해 잘 예측되는 정도를 의미
* 다중공선성이 있으면 계수 추정이 잘 안되거나 불안정해져서 데이터가 약간만 바뀌어도 추정치가 크게 달라질 수 있음

$$ VIF_i = {1 \over {1-R^2_i}}  $$ 

* 분산팽창계수(VIF)를 구하여 판단함
* 엄밀한 기준은 없으나 보통 10을 넘어서면 다중공선성이 있다고 판단
"""

# ex) 다중공선성 문제 풀기 시멘트가 굳어지며 발생하는 열의 양을 결정짓는 4가지 성분의 회귀분석
x1 = [7, 1, 11, 11, 7, 11, 3, 1, 2, 21, 1, 11, 10]
x2 = [26, 29, 56, 31, 52, 55, 71, 31, 54, 47, 40, 66, 68]
x3 = [6, 15, 8, 8, 6, 9, 17, 22, 18, 4, 23, 9, 8]
x4 = [60, 52, 20, 47, 33, 22, 6, 44, 22, 26, 34, 12, 12]

y = [78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7, 72.5, 93.1, 115.9, 83.8, 113.3, 109.4]

cement = pd.DataFrame({'x1': x1,'x2':x2, 'x3':x3,'x4':x4,'y':y})
sns.pairplot(cement)

df_corr = cement.corr()
sns.heatmap(df_corr, annot=True)

# 다중회귀분석
result = ols('y~x1+x2+x3+x4', data=cement).fit()
print(result.summary())

# 분석결과
# 결정계수는 높지만 (조정된 결정계수도 높음) 각 계수별 유의성은 거의 없음(유의확률 0.05보다 큼)
# => 다중공선성 때문에 발생 => 팽창계수VIF를 확인해 봄

# 다중공선성 알아보기
# statsmodels 패키지에서 variance_inflation_factor 함수 사용
from statsmodels.stats.outliers_influence import variance_inflation_factor

model = ols('y~x1+x2+x3+x4', data=cement)
print(model.exog_names) # 독립변수 이름 확인

print(variance_inflation_factor(model.exog,1)) # 1번째 독립변수의 VIF 확인
print(variance_inflation_factor(model.exog,2)) # 2번째 독립변수의 VIF 확인
print(variance_inflation_factor(model.exog,3)) # 3번째 독립변수의 VIF 확인
print(variance_inflation_factor(model.exog,4)) # 4번째 독립변수의 VIF 확인
# x1,x3에 비해 x2,x4의 팽창계수가 큼
# x2,x4를 제외하고 다시 회귀모형 생성

# 1, x1, x3 을 이용한 다중회귀모형
model = ols('y~x1+x3',data=cement)
print(model.fit().summary())
print(variance_inflation_factor(model.exog,1))
print(variance_inflation_factor(model.exog,2))
# 수정된 결정계수 : 0.458
# 회귀계수 x3 이 유의성 검정 실패!
# 팽창계수는 작지만, 모델의 설명력이 떨어짐

# 2. x1, x2 을 이용한 다중회귀모형
model = ols('y~x1+x2',data=cement)
print(model.fit().summary())
print(variance_inflation_factor(model.exog,1))
print(variance_inflation_factor(model.exog,2))
# 수정된 결정계수 : 0.974
# 회귀계수들은 유의성 검정 성공 !

# 3. x을 이용한 3,x4 다중회귀모형
model = ols('y~x3+x4',data=cement)
print(model.fit().summary())
print(variance_inflation_factor(model.exog,1))
print(variance_inflation_factor(model.exog,2))
# 수정된 결정계수 : 0.922
# 회귀계수들은 유의성 검정 성공!

# 4. x2,x3,x4을 이용한 다중회귀모형
model = ols('y~x2+x3+x4',data=cement)
print(model.fit().summary())
print(variance_inflation_factor(model.exog,1))
print(variance_inflation_factor(model.exog,2))
print(variance_inflation_factor(model.exog,3))
# 수정된 결정계수 : 0.964
# 회귀계수들은 유의성 검정 성공!

"""# 독립변수 최적화
독립변수가 많을때 유의한 계수를 포함시키고
유의하지 않은 계수를 제외시켜 구한
회귀방정식은 간단해지고 이해하기 쉬워짐
=> 가능하다면 적은수의 독립변수를
포함하는 것이 좋음

다중회귀식에 포함할 수 있는 독립변수들을
효과적으로 선별할 수 있는 분석방법
=> 단계적 회귀법, 단계적 변수선택법

# 독립변수 소거법
전진소거법 : 변수를 하나씩 추가함
             => 중요도가 높은 변수부터 추가
후진소거법 : 모든 변수를 추가해둔 상태에서
             p값이 높은 변수부터 제거
최적선택법 : 전진/후진 소거법을 적절히 조합

# 변수소거시 참고해야하는 지표 : AIC, BIC
# 모델에 k개의 변수를 추가하면 2k만큼 불이익이 추가함
# 따라서 변수 소거시 AIC, BIC가 낮아지는 모델을 찾으면 됨

# AIC = akaike information criterion
# BIC = bayes information criterion
# RSS = 잔차크기

$$ AIC = 2P + nlog({RSS \over n}) $$
$$ BIC = plog(n) + nlog({RSS \over n}) $$
"""

# ex) 부동산회사에서 소유하고 있는 주택에 대해 예상 난방비를 예측하려함. 
# 모든 독립 변수들을 단계별 소거법을 이용해서 적절한 회귀방정식을 작성하세요
houses = pd.read_csv('https://raw.githubusercontent.com/hanrury/bigdataset/master/houses.txt', sep='\t', encoding='euc-kr')
model = ols('난방비~평균외부기온+단열재+난방사용연수', data = houses)
result = model.fit()
print(result.summary())

# 회귀계수들 중에서 p 값이 큰것들은 제외함
# => 난방사용연수는 제외함

# 난방사용연수 제외하고 다시 다항회귀분석
model = ols('난방비~평균외부기온+단열재', data = houses)
result = model.fit()
print(result.summary())

# 수정된 결정계수값이(adj. r-sqaure) 줄었지만 모든 회귀계수의 유의확률이 정상
# 결론 : 평균외부기온,단열재들만 이용해서 회귀식을 재작성함
# y = 490.29 + -5,15*x1 + -14.72*x2

# Boston 집값 데이터를 이용해서 다중회귀분석을 실시하고
# 적절한 변수들로 구성도니 회귀식을 작성하세요.
# 1979 보스턴 지역 주택가격
# 560개 타운의 주택가격의 중앙값(단위 1000달러)
from sklearn.datasets import load_boston

boston = load_boston()
print(boston.DESCR)

df_boston = pd.DataFrame(boston.data, columns=boston.feature_names)
df_boston['MEDV'] = boston.target  # boston.target: 종속변수로 구성된 데이터 묶음
df_boston.head()

# 다중회귀분석
sns.pairplot(df_boston)

# 상관분석
bscorr = df_boston.corr()
fig, axs = plt.subplots(figsize=(12,12))
sns.heatmap(bscorr, annot=True,ax=axs)

# 다중회귀모델 
model = ols('MEDV~CRIM+ZN+INDUS+CHAS+RM+AGE+DIS+RAD+TAX+PTRATIO+B+LSTAT',data=df_boston)
print(model.fit().summary())

# 수정된 결정계수 : 0.723
# F 통계량 : 110.6 (<0.0001)
# 회귀계수 : INDUS, AGE 만 유의성 검정에 실패
# 회귀계수 유의수준 : 
# 회귀식 : 

# 다중공선성 확인
print(model.exog_names)

for i in range(1,len(model.exog_names)):
  print(variance_inflation_factor(model.exog, i))

# 유의하지 않은 변수는 제거하고 다시 다중회귀분석 (INDUS, AGE 제외)
model = ols('MEDV~CRIM+ZN+CHAS+RM+DIS+RAD+TAX+PTRATIO+B+LSTAT',data=df_boston)
print(model.fit().summary())

# 수정된 결정계수 : 0.722
# F 통계량 : 132.4 (<0.0001)
# 회귀계수 : 모든 회귀계수가 유의성 검정에 만족
# 회귀계수 유의수준 : CRIME 제외하고 모두 0.001보다 작음
# 회귀식 : 
# AIC : 3045 -> 3044 줄어듬
# 회귀식을 좀더 정리하고 싶다면 CRIM을 제외시켜도 됨

# 회귀모델 생성 기여도가 작은 변수는 제거하고 다시 다중회귀분석
model = ols('MEDV~+ZN+CHAS+RM+DIS+RAD+TAX+PTRATIO+B+LSTAT',data=df_boston)
print(model.fit().summary())

# 수정된 결정계수 : 0.718
# F 통계량 : 144.1 (<0.0001)
# 회귀계수 : 모든 회귀계수가 유의성 검정에 만족
# 회귀계수 유의수준 : CHAS 제외하고 모두 0.001보다 작음
# 회귀식 : 
# AIC : 3044 -> 3050 늚

# 전진소거법 : 아무것도 없는 식에 독립변수를 추가하면서 적절한 식을 만드는 방법

# 0단계
model = ols('MEDV~1', data=df_boston) # ~1 은 아무것도 없는것
print(model.fit().summary())
# AIC : 3682

# 1단계
model = ols('MEDV~CRIM', data=df_boston)
print(model.fit().summary())
# 결정계수 : 0.151
# CRIM 변수 기여도 : 유의확률 문제 없음
# AIC : 3682 -> 3602

# 2단계
model = ols('MEDV~CRIM+ZN', data=df_boston)
print(model.fit().summary())
# 결정계수 : 0.234
# CRIM 변수 기여도 : 유의확률 문제 없음
# AIC : 3602 -> 3552

# 3단계
model = ols('MEDV~CRIM+ZN+INDUS', data=df_boston)
print(model.fit().summary())
# 결정계수 : 0.294
# CRIM 변수 기여도 : CRIM,ZN,INDUS유의확률 문제 없음
# AIC : 3552 -> 3513