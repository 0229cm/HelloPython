# -*- coding: utf-8 -*-
"""머신러닝02-sklearn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zpOKOMMQMlJKl5L0uc-EYY4v1T8UgF4b

# sklearn
* 파이썬 기반 쉽고 효율적인 머신러닝 라이브러리 제공
* 머신러닝을 위한 다양한 알고리즘 제공
* 데이터셋, 데이터전처리, 지도/비지도학습, 모델 선택/평가 등을 위한 모듈 제공
* scikit-learn.org
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn

# 버전확인
print(sklearn.__version__)

# scikit-learn에서 제공하는 데이터셋 확인
# load : 내장된 데이터셋 불러옴
# fetch : 인터넷을 통해 내려받는 대량 데이터
# make : 확률분포에 근거해서 생성하는 가상 데이터
from sklearn.datasets import load_iris
from sklearn.datasets import load_boston
from sklearn.datasets import load_digits

iris = load_iris()
boston = load_boston()
digits = load_digits()

# 데이터 속성 알아보기 : 객체명.DESCR
print(iris.DESCR)
print(boston.DESCR)
print(digits.DESCR)

# 실제 데이터 알아보기 : 객체명.data, 객체명.target
print('데이터5',iris.data[:5,]) # 데이터 (독립변수)
print('타겟5',iris.target[:5,]) # 레이블 (종속변수)
print('특징이름',iris.feature_names) # 컬럼명
print('타겟네임',iris.target_names) # 레이블의 실제값

# boston 데이터 알아보기
print('데이터5',boston.data[:5,]) # 데이터 (독립변수)
print('타겟5',boston.target[:5,]) # 레이블 (종속변수)
print('특징이름',boston.feature_names) # 컬럼명

# digits 데이터 알아보기
# 0~9사이 숫자 손글씨를 픽셀화 한것
# 16개의 명암을 포함하는 8*8 픽셀이미지
print('데이터5',digits.data[:5,]) # 데이터 (독립변수)
print('타겟5',digits.target[:5,]) # 레이블 (종속변수)
print('이미지',digits.images.shape) # 데이트크기(총갯수, 가로,세로)

# 손글씨를 이미지화해서 화면에 출력
img_lbl = list(zip(digits.images, digits.target))
# 이미지데이터와 레이블을 하나로 묶어서 리스트로 생성

for ix, (img, lbl) in enumerate(img_lbl[:10]):
  # 리스트로부터 10개의 데이터를 가져와서 img와 lb로 각각 나눠 저장
  plt.subplot(2,5, ix+1) # 2*5 그래프 영역 생성후 i번째 영역 선택
  plt.axis(False) # x,y축은 생략
  plt.imshow(img, cmap=plt.cm.gray_r, interpolation='nearest')
  # gray 색상맵과 이미지 보정을 이용해서 픽셀 데이터를 이미지로 출력
  plt.title('training : %i' %lbl)

# 유명 정치인 사진 데이터 다운로드
# 265색상의 50*37 이미지
# 5749 명의 13233개 이미지로 구성
import PIL 
from sklearn.datasets import fetch_lfw_people

people= fetch_lfw_people(color=True,min_faces_per_person=25, resize=None)
# min_faces_per_person : 인물당 최소 사진수
# color = 흑백/컬러 여부 지정
# resize : 이미지 크기 재조정

print(people.DESCR)
print(people.images.shape)
print(people.images[:5])

print(people.target.shape)
print(people.target[:5])
print(people.target_names) # 유명인 이름

# 유명인데이터를 이미지화해서 화면에 출력
img_lbl = list(zip(people.images, people.target))

plt.figure(figsize=(10,6))
for ix, (img, lbl) in enumerate(img_lbl[:15]):
  plt.subplot(5,3, ix+1) 
  plt.axis(False) 
  plt.imshow(img, interpolation='nearest')
  plt.title('%s' % people.target_names[lbl])

# make_classification

# make_blob, make_classificationl, make_moon, make_circle 등의 가상데이터 생성함수 지원

# make_classification
# n_features : 독립변수 수, 기본 20
# n_informative : 독립변수와 종속변수간 상관계수
# n_redundant=0 : 독립변수와 종속변수간 선형관계수
# n_clusters_per_class : 군집수
# random_state : 난수생성 시드값
# n_samples : 표본수, 기본 100

from sklearn.datasets import make_classification

X,y = make_classification(n_features=2, n_informative=1, n_redundant=0, n_clusters_per_class=1,random_state=2007271430)
# => 2개의 독립변수를 가지는 가상데이터

plt.scatter(X[:,0],X[:,1], marker='o', c=y, s=100, edgecolors='k')

"""# make_blob
가우시안 정규분포를 이용해서 군집용 가상데이터 생성
centers = 생성할 군집수, 기본 3
"""

from sklearn.datasets import make_blobs
X,y = make_blobs(n_features=2, centers=3, random_state=2007281430)
plt.scatter(X[:,0], X[:,1], marker='o', c=y, s=100, edgecolors='k')

